//For connections: 
// From up to down, left to right
// a = Bank B(3, 2)
// b = Bank B(3, 3)
// cin = Bank B(4, 2)
// s = Bank C(2, 7)
// cout = Bank C(1, 7)

module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    input cout,
    input s
  ) {
  
  sig rst;                  // reset signal
  
  fa_checker fa_check;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst) {
      counter slowclk(#SIZE(1),#DIV(25));
    }
  }
  
  .clk(slowclk.value){
    .rst(rst){
       counter cntr(#SIZE(3));
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
     
    
    fa_check.counter_val = cntr.value;
    fa_check.c0 = cout;
    fa_check.s = s;
    
    //Use led to troubleshoot the results
    io_led[0][0] = cntr.value[0];
    io_led[0][1] = cntr.value[1];
    io_led[0][2] = cntr.value[2];
    
    io_led[1][0] = s;
    io_led[1][1] = cout;
    
    io_led[0][7:6] = fa_check.addResult;
    io_led[2][0] = fa_check.checkResult;
    
    
  }
}